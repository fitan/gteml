// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/fitan/magic/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTblServicetree(db *gorm.DB) tblServicetree {
	_tblServicetree := tblServicetree{}

	_tblServicetree.tblServicetreeDo.UseDB(db)
	_tblServicetree.tblServicetreeDo.UseModel(&model.TblServicetree{})

	tableName := _tblServicetree.tblServicetreeDo.TableName()
	_tblServicetree.ALL = field.NewField(tableName, "*")
	_tblServicetree.ID = field.NewInt(tableName, "id")
	_tblServicetree.Name = field.NewString(tableName, "name")
	_tblServicetree.Aname = field.NewString(tableName, "aname")
	_tblServicetree.Pnode = field.NewInt(tableName, "pnode")
	_tblServicetree.Type = field.NewInt(tableName, "type")
	_tblServicetree.Key = field.NewString(tableName, "key")
	_tblServicetree.Origin = field.NewString(tableName, "origin")

	_tblServicetree.fillFieldMap()

	return _tblServicetree
}

type tblServicetree struct {
	tblServicetreeDo tblServicetreeDo

	ALL    field.Field
	ID     field.Int
	Name   field.String
	Aname  field.String
	Pnode  field.Int
	Type   field.Int
	Key    field.String
	Origin field.String

	fieldMap map[string]field.Expr
}

func (t tblServicetree) As(alias string) *tblServicetree {
	t.tblServicetreeDo.DO = *(t.tblServicetreeDo.As(alias).(*gen.DO))

	t.ALL = field.NewField(alias, "*")
	t.ID = field.NewInt(alias, "id")
	t.Name = field.NewString(alias, "name")
	t.Aname = field.NewString(alias, "aname")
	t.Pnode = field.NewInt(alias, "pnode")
	t.Type = field.NewInt(alias, "type")
	t.Key = field.NewString(alias, "key")
	t.Origin = field.NewString(alias, "origin")

	t.fillFieldMap()

	return &t
}

func (t *tblServicetree) WithContext(ctx context.Context) *tblServicetreeDo {
	return t.tblServicetreeDo.WithContext(ctx)
}

func (t tblServicetree) TableName() string { return t.tblServicetreeDo.TableName() }

func (t *tblServicetree) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := t.fieldMap[fieldName]
	return field, ok
}

func (t *tblServicetree) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["aname"] = t.Aname
	t.fieldMap["pnode"] = t.Pnode
	t.fieldMap["type"] = t.Type
	t.fieldMap["key"] = t.Key
	t.fieldMap["origin"] = t.Origin
}

func (t tblServicetree) clone(db *gorm.DB) tblServicetree {
	t.tblServicetreeDo.ReplaceDB(db)
	return t
}

type tblServicetreeDo struct{ gen.DO }

func (t tblServicetreeDo) Debug() *tblServicetreeDo {
	return t.withDO(t.DO.Debug())
}

func (t tblServicetreeDo) WithContext(ctx context.Context) *tblServicetreeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tblServicetreeDo) Clauses(conds ...clause.Expression) *tblServicetreeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tblServicetreeDo) Not(conds ...gen.Condition) *tblServicetreeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tblServicetreeDo) Or(conds ...gen.Condition) *tblServicetreeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tblServicetreeDo) Select(conds ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tblServicetreeDo) Where(conds ...gen.Condition) *tblServicetreeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tblServicetreeDo) Order(conds ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tblServicetreeDo) Distinct(cols ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tblServicetreeDo) Omit(cols ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tblServicetreeDo) Join(table schema.Tabler, on ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tblServicetreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tblServicetreeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tblServicetreeDo) Group(cols ...field.Expr) *tblServicetreeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tblServicetreeDo) Having(conds ...gen.Condition) *tblServicetreeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tblServicetreeDo) Limit(limit int) *tblServicetreeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tblServicetreeDo) Offset(offset int) *tblServicetreeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tblServicetreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tblServicetreeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tblServicetreeDo) Unscoped() *tblServicetreeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tblServicetreeDo) Create(values ...*model.TblServicetree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tblServicetreeDo) CreateInBatches(values []*model.TblServicetree, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tblServicetreeDo) Save(values ...*model.TblServicetree) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tblServicetreeDo) First() (*model.TblServicetree, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblServicetree), nil
	}
}

func (t tblServicetreeDo) Take() (*model.TblServicetree, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblServicetree), nil
	}
}

func (t tblServicetreeDo) Last() (*model.TblServicetree, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblServicetree), nil
	}
}

func (t tblServicetreeDo) Find() ([]*model.TblServicetree, error) {
	result, err := t.DO.Find()
	return result.([]*model.TblServicetree), err
}

func (t tblServicetreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TblServicetree, err error) {
	buf := make([]*model.TblServicetree, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tblServicetreeDo) FindInBatches(result *[]*model.TblServicetree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tblServicetreeDo) Attrs(attrs ...field.AssignExpr) *tblServicetreeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tblServicetreeDo) Assign(attrs ...field.AssignExpr) *tblServicetreeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tblServicetreeDo) Joins(field field.RelationField) *tblServicetreeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tblServicetreeDo) Preload(field field.RelationField) *tblServicetreeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tblServicetreeDo) FirstOrInit() (*model.TblServicetree, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblServicetree), nil
	}
}

func (t tblServicetreeDo) FirstOrCreate() (*model.TblServicetree, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TblServicetree), nil
	}
}

func (t tblServicetreeDo) FindByPage(offset int, limit int) (result []*model.TblServicetree, count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	return
}

func (t tblServicetreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tblServicetreeDo) withDO(do gen.Dao) *tblServicetreeDo {
	t.DO = *do.(*gen.DO)
	return t
}
