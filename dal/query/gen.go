// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Audit:      newAudit(db),
		Permission: newPermission(db),
		Role:       newRole(db),
		Service:    newService(db),
		User:       newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Audit      audit
	Permission permission
	Role       role
	Service    service
	User       user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Audit:      q.Audit.clone(db),
		Permission: q.Permission.clone(db),
		Role:       q.Role.clone(db),
		Service:    q.Service.clone(db),
		User:       q.User.clone(db),
	}
}

type queryCtx struct {
	Audit      auditDo
	Permission permissionDo
	Role       roleDo
	Service    serviceDo
	User       userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Audit:      *q.Audit.WithContext(ctx),
		Permission: *q.Permission.WithContext(ctx),
		Role:       *q.Role.WithContext(ctx),
		Service:    *q.Service.WithContext(ctx),
		User:       *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
