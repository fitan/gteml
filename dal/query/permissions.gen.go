// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/fitan/magic/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newPermission(db *gorm.DB) permission {
	_permission := permission{}

	_permission.permissionDo.UseDB(db)
	_permission.permissionDo.UseModel(&model.Permission{})

	tableName := _permission.permissionDo.TableName()
	_permission.ALL = field.NewField(tableName, "*")
	_permission.ID = field.NewUint(tableName, "id")
	_permission.CreatedAt = field.NewTime(tableName, "created_at")
	_permission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_permission.DeletedAt = field.NewField(tableName, "deleted_at")
	_permission.ParentId = field.NewUint(tableName, "parent_id")
	_permission.Icon = field.NewString(tableName, "icon")
	_permission.Menu = field.NewBool(tableName, "menu")
	_permission.Method = field.NewString(tableName, "method")
	_permission.Alias = field.NewString(tableName, "alias")
	_permission.Name = field.NewString(tableName, "name")
	_permission.Path = field.NewString(tableName, "path")
	_permission.Description = field.NewString(tableName, "description")

	_permission.fillFieldMap()

	return _permission
}

type permission struct {
	permissionDo

	ALL         field.Field
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	ParentId    field.Uint
	Icon        field.String
	Menu        field.Bool
	Method      field.String
	Alias       field.String
	Name        field.String
	Path        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (p permission) As(alias string) *permission {
	p.permissionDo.DO = *(p.permissionDo.As(alias).(*gen.DO))

	p.ALL = field.NewField(alias, "*")
	p.ID = field.NewUint(alias, "id")
	p.CreatedAt = field.NewTime(alias, "created_at")
	p.UpdatedAt = field.NewTime(alias, "updated_at")
	p.DeletedAt = field.NewField(alias, "deleted_at")
	p.ParentId = field.NewUint(alias, "parent_id")
	p.Icon = field.NewString(alias, "icon")
	p.Menu = field.NewBool(alias, "menu")
	p.Method = field.NewString(alias, "method")
	p.Alias = field.NewString(alias, "alias")
	p.Name = field.NewString(alias, "name")
	p.Path = field.NewString(alias, "path")
	p.Description = field.NewString(alias, "description")

	p.fillFieldMap()

	return &p
}

func (p *permission) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := p.fieldMap[fieldName]
	return field, ok
}

func (p *permission) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["parent_id"] = p.ParentId
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["menu"] = p.Menu
	p.fieldMap["method"] = p.Method
	p.fieldMap["alias"] = p.Alias
	p.fieldMap["name"] = p.Name
	p.fieldMap["path"] = p.Path
	p.fieldMap["description"] = p.Description
}

func (p permission) clone(db *gorm.DB) permission {
	p.permissionDo.ReplaceDB(db)
	return p
}

type permissionDo struct{ gen.DO }

func (p permissionDo) Debug() *permissionDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionDo) WithContext(ctx context.Context) *permissionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionDo) Clauses(conds ...clause.Expression) *permissionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionDo) Not(conds ...gen.Condition) *permissionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionDo) Or(conds ...gen.Condition) *permissionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionDo) Select(conds ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionDo) Where(conds ...gen.Condition) *permissionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionDo) Order(conds ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionDo) Distinct(cols ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionDo) Omit(cols ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionDo) Join(table schema.Tabler, on ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *permissionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *permissionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionDo) Group(cols ...field.Expr) *permissionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionDo) Having(conds ...gen.Condition) *permissionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionDo) Limit(limit int) *permissionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionDo) Offset(offset int) *permissionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *permissionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionDo) Unscoped() *permissionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionDo) Create(values ...*model.Permission) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionDo) CreateInBatches(values []*model.Permission, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionDo) Save(values ...*model.Permission) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionDo) First() (*model.Permission, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Permission), nil
	}
}

func (p permissionDo) Take() (*model.Permission, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Permission), nil
	}
}

func (p permissionDo) Last() (*model.Permission, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Permission), nil
	}
}

func (p permissionDo) Find() ([]*model.Permission, error) {
	result, err := p.DO.Find()
	return result.([]*model.Permission), err
}

func (p permissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Permission, err error) {
	buf := make([]*model.Permission, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionDo) FindInBatches(result *[]*model.Permission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionDo) Attrs(attrs ...field.AssignExpr) *permissionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionDo) Assign(attrs ...field.AssignExpr) *permissionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionDo) Joins(field field.RelationField) *permissionDo {
	return p.withDO(p.DO.Joins(field))
}

func (p permissionDo) Preload(field field.RelationField) *permissionDo {
	return p.withDO(p.DO.Preload(field))
}

func (p permissionDo) FirstOrInit() (*model.Permission, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Permission), nil
	}
}

func (p permissionDo) FirstOrCreate() (*model.Permission, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Permission), nil
	}
}

func (p permissionDo) FindByPage(offset int, limit int) (result []*model.Permission, count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	result, err = p.Offset(offset).Limit(limit).Find()
	return
}

func (p permissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *permissionDo) withDO(do gen.Dao) *permissionDo {
	p.DO = *do.(*gen.DO)
	return p
}
